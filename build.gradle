apply plugin: 'java'
apply plugin: 'maven'
apply plugin: 'checkstyle'
apply plugin: 'jacoco'
apply plugin: 'findbugs'
apply plugin: 'maven-publish'
apply plugin: 'jetty'
apply plugin: 'pmd'
apply plugin: 'jdepend'
apply plugin: 'com.bmuschko.cargo'
apply plugin: 'com.bmuschko.cargo-base'

// If you use this project for training and want to deploy to your Tomcat webapp
// you must chose set a trainingUserName, which gives you your own deploy path on Tomcat
// and your own artifact repository 

ext.trainingUserName = 'mytrainingusername' // it is a good idea to chose the same as your github id

ext {
artifactoryUrlAndPort = System.properties.artifactoryUrlAndPort ?: "http://roadshowartifactory:8081/artifactory"
tomcatHostname = System.properties.tomcatHostname ?: "roadshowtomcatserver/" //no http or https
tomcatPort = System.properties.tomcatPort ?: "8080"
seleniumHostname = System.properties.seleniumHostname ?: "10.10.1.134"
seleniumPort = System.properties.seleniumPort ?: "44444"
tomcatUrlAndPort = "http://" + tomcatHostname + ":" + tomcatPort
appName = name

deployContext = System.properties.deployContext ?: "RC" // should be either RC or REL
trainingUserWebappDir = System.properties.trainingUserWebappDir ?: trainingUserName //
deployPath = System.properties.deployPath ?: "${trainingUserWebappDir}/${appName}-${deployContext}"

buildNumber = System.properties.buildNumber ?: "SNAPSHOT"
} 

group = 'net.praqma.roadshow.buep' // FIXME - add your initials or github id here

ext.versionMajor = "1"
ext.versionMinor = "1"
ext.versionPatch = "0"

version = "${versionMajor}.${versionMinor}.${versionPatch}-${buildNumber}"

// https://github.com/ajoberstar/gradle-git/wiki
import org.ajoberstar.grgit.*

ext.gitRepo = Grgit.open(project.file('.'))
ext.gitRepoUrl = gitRepo.remote.list().get(0).url
ext.gitVersion = "${version}-${gitRepo.head().abbreviatedId}"

task printProps {
		doLast {
			println "App name: ${appName}"
			println "Training user name: ${trainingUserName}"
			println "Artifactory URL and port: ${artifactoryUrlAndPort}"
			println "Tomcat host name 'tomcatHostname':      ${tomcatHostname}"
            println "Tomcat port 'tomcatPort':    ${tomcatPort}"
            println "Tomcat port 'tomcatUrlAndPort':    ${tomcatUrlAndPort}"
			println "Deploy context: ${deployContext}"
			println "Deploy path: ${deployPath}"
			println "Version: ${version}"
			println "Git version: ${gitVersion}"
			println "Git repo: ${gitRepoUrl}"
		}
}


description = """"""

sourceCompatibility = 1.6
targetCompatibility = 1.6

def repositoryUrl(name) {
    ext.artifactoryUrlAndPort + "/libs-${name}-local"
}


tasks.withType(JavaCompile){
    options.warnings = true
}

repositories {
    jcenter()
    mavenCentral()
}

dependencies {
    compile group: 'org.seleniumhq.selenium', name: 'selenium-java', version:'2.26.0'
    compile group: 'org.seleniumhq.selenium', name: 'selenium-server', version:'2.28.0'
    compile group: 'javax.servlet', name: 'javax.servlet-api', version:'3.0.1'
    compile group: 'junit', name: 'junit', version:'4.7'
}
buildscript {
    repositories {
        jcenter()
    }

    dependencies {
        classpath 'com.bmuschko:gradle-cargo-plugin:2.0.3'
    		classpath 'org.ajoberstar:gradle-git:1.1.0'
    }
}
jacoco {
    toolVersion = "0.7.1.201405082137"
}

test {
    filter {
        includeTestsMatching "net.praqma.roadshow.unit.*"
   }
}

// disable caching of dependencies
configurations.all {
    // check for updates every build
    resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
}

stopPort = 4455
stopKey = 'stop'

task startApp(type: JettyRunWar) {
    daemon = true
}

task functionalTestTomcat(type: Test) {
    systemProperties(
        deployPath: deployPath, 
        tomcatUrlAndPort: tomcatUrlAndPort,
        seleniumPort: seleniumPort,
        seleniumHostname: seleniumHostname)
    testLogging.showStandardStreams = true
    filter {
        includeTestsMatching "net.praqma.roadshow.functional.*"
    }
}

task functionalTest(type: Test) {
    group 'verification'
    description 'Execute Selenium tests'

    dependsOn startApp
    filter {
        includeTestsMatching "net.praqma.roadshow.functional.*"
    }
    finalizedBy jettyStop
}

// Create test tasks to use on Jenkins so test results
// are seen as new, even though gradle is to smart to run
// the tasks again. The Jenkins JUnit plugin fails the build
// if test results are not new, eg. when building manually.
tasks.addRule("Pattern: jenkins<TaskName>: Update timestamp of test output files.") { String taskName ->
  if (taskName.startsWith('jenkins')) {
    String s = taskName - 'jenkins'
    Task testTask = tasks.findByName(s[0].toLowerCase() + s[1..-1])
    // If the rest of the taskName identifies a Test task, then create new task to update timestamp of test output file. This is needed for Jenkins
    if (testTask instanceof Test) {
      tasks.create(taskName) {
        dependsOn testTask
        doLast {
          def timestamp = System.currentTimeMillis()
          fileTree(dir: "${buildDir}/test-results/", include: "TEST*.xml").each {
            it.lastModified = timestamp 
          }
        }      
      }
    }
  }
}
task wrapper(type: Wrapper) {
    gradleVersion = '2.2'
}


task staticAnalysis {
	description 'Run all project defined static analysis checks on source and test code'
	dependsOn jdependMain, jdependTest, pmdMain, pmdTest, checkstyleMain, checkstyleTest, findbugsMain, findbugsTest
}

pmd {
	toolVersion = '5.1.1'
	ignoreFailures = true
}

jdepend {
	toolVersion = '2.9.1'
	ignoreFailures = true
}

checkstyle {
	toolVersion = '5.7'
    ignoreFailures = true
}

findbugs {
    toolVersion = "3.0.1"
    ignoreFailures = true
}

publishing {
    repositories {
        maven {
            url deployContext == "REL" ? repositoryUrl("release") : repositoryUrl("snapshot")
        }
    }
    publications {
        roadShow(MavenPublication) {
            artifact war
        }
    }
}

configurations {
  // Configuration for artifacts deployed to Tomcat
  deployables
}

// display caching for snapshot version 
configurations.deployables.resolutionStrategy.cacheChangingModulesFor 0, 'seconds'

dependencies {
  deployables "${group}:${name}:${version}"
}

// TODO too many hardcoded values

task deploy(type: Copy) {
  description "Retrieve the war from repository and deploy to Tomcat"
  group "Web application"

  from (configurations.deployables) { rename { "roadshow.war" } }
  into '/tmp/tomcat/webapps'
}


// https://github.com/bmuschko/gradle-cargo-plugin
cargo {
    containerId = 'tomcat7x'
    port = tomcatPort.toInteger()
    
    deployable {
        context = deployPath 
    }
    
    remote {
        hostname = tomcatHostname
//        username = "username"
//        password = "password"
        if (project.hasProperty('tomcatUsername')) {
            username = tomcatUsername
            println "********************" +  username
        } else {
            println "Property 'tomcatUsername' not defined"
        }
        
        if (project.hasProperty('tomcatPassword')) {
            password = tomcatPassword
            println "********************" +  password
        } else {
            println "Property 'tomcatPassword' not defined"
        }
    }
    
}






task deployWar(type: Copy) {
  description "Deploy the war to Tomcat"
  group "Web application"

  from (war) { rename { "roadshow.war" } }
  into '/tmp/tomcat/webapps'
}



// gradle.org/docs/current/userguide/userguide_single.html#N103DE , see "7.2.3. Customizing the project"
war {
    manifest {
        attributes 	'Implementation-AppName': appName,
                   	'Implementation-TrainingUserName': trainingUserName,
										'Implementation-DeployPath': deployPath,
										'Implementation-Version': version,
										'Implementation-GitVersion': gitVersion,
										'Implementation-GitRepoUrl': gitRepoUrl
    }
}
jar {
    manifest {
        attributes 	'Implementation-AppName': appName,
                   	'Implementation-TrainingUserName': trainingUserName,
										'Implementation-DeployPath': deployPath,
										'Implementation-Version': version,
										'Implementation-GitVersion': gitVersion,
										'Implementation-GitRepoUrl': gitRepoUrl
    }
}



